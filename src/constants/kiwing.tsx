import Link from 'next/link';

export const kiwingAccordionsContent = [
  {
    id: '1',
    text: 'React',
    answer:
      'UI 개발에 집중할 수 있습니다. 컴포넌트를 이용해서 재사용 가능하고, 논리적으로 파일을 나누어서 개발 진행을 할 수 있습니다. 또한 JSX 문법을 이용해서 조금 더 직관적으로 템플릿을 구성할 수 있어서 사용했습니다. 그리고 커뮤니티가 방대해서 자료 찾기도 편합니다.',
  },
  {
    id: '2',
    text: 'TypeScript',
    answer:
      '함수나 객체에 들어가는 구조에 타입을 정의함으로써 인자나 프로퍼티의 자동완성으로 개발 진행할 때 편의성을 얻을 수 있습니다. 또한 함수, 객체의 값들을 실행 전에 타입이 틀린 부분을 발견하여 실행 후에 에러를 방지할 수 있습니다.',
  },
  {
    id: '3',
    text: 'react-router-dom',
    answer:
      'SPA인 React에서 라우팅을 구현하기 위해서 사용했습니다. 라우팅을 서버에서 관리하는 것이 아닌 클라이언트가 구현함으로써 SPA가 깜빡임 없이 페이지 이동을 구현할 수 있게 합니다.',
  },
  {
    id: '4',
    text: 'react-query',
    answer:
      'react-query는 서버 데이터를 캐싱하고, 관리하는 데 있어 강력한 도구입니다. 데이터 요청, 캐싱, 오류 처리 등을 자동으로 처리해주므로 개발자가 이에 집중하지 않고 UI 개발에 더 집중할 수 있게 해줍니다. 또한, 서버와의 데이터 통신을 효율적으로 관리하여 네트워크 요청을 최적화합니다.',
  },
  {
    id: '5',
    text: 'zustand',
    answer:
      '함수나 객체에 들어가는 구조에 타입을 정의함으로써 인자나 프로퍼티의 자동완성으로 개발 진행할 때 편의성을 얻을 수 있습니다. 또한 함수, 객체의 값들을 실행 전에 타입이 틀린 부분을 발견하여 실행 후에 에러를 방지할 수 있습니다.',
  },
  {
    id: '6',
    text: 'styled-components',
    answer:
      'CSS-in-JS를 사용한 이유는 공통 컴포넌트가 많기에 프로젝트가 UI 인터렉션 위주가 아닌 컴포넌트 위주의 프로젝트가 진행될 가능성이 커서 선택했습니다. 컴포넌트 위주의 프로젝트에서 개발 효율성을 중요시 하고, 필요한 CSS 스타일 요소만 로딩하기 때문에 사용하게 되었습니다.',
  },
  {
    id: '7',
    text: 'axios',
    answer:
      'axios는 HTTP 클라이언트 라이브러리로, 데이터 요청과 응답 처리를 간편하게 할 수 있습니다. 강력한 설정 옵션과 인터셉터 기능을 제공하여, 요청과 응답에 대한 처리를 쉽게 구현할 수 있습니다. 또한, Promise 기반의 API를 사용하므로 비동기 코드를 깔끔하게 관리할 수 있습니다.',
  },
  {
    id: '8',
    text: 'Mock Service Worker',
    answer:
      'MSW는 API mocking을 위한 도구입니다. 실제 서버 없이도 개발 환경에서 모의 API를 구축하고, 테스트 데이터를 제공할 수 있습니다. 이를 통해 프론트엔드 개발을 빠르게 진행할 수 있으며, API 변경에 따른 테스트 및 개발의 유연성을 높입니다.',
  },
];

export const kiwingContent = [
  '재사용 가능한 공통 컴포넌트 개발을 세밀하게 분류하고 조합함으로써 재사용성을 높였고, 이를 통해 유지보수성, 성능 최적화, 그리고 팀 협업의 효율성을 향상시켰습니다.',
  'FE/BE 개발을 병렬적으로 진행해 개발 생산성을 향상시키기 위한 MSW 사용하였습니다.',
  '반응형 웹사이트를 PC와 모바일 웹뷰에 맞춰 구현하고, PWA를 도입했습니다.',
  '사용자 경험 향상을 위해 react-query의 useInfiniteQuery를 이용하여 무한스크롤을 적용하였습니다.',
  '검색 엔진 최적화를 위해 시멘틱 태그로 마이그레이션 하였습니다.',
  '공유된 꾸러미 페이지와 공유된 상세 꾸러미 페이지를 담당하였습니다.',
  'hotjar를 도입하여 실제 사용자의 웹사이트 행동 분석 및 피드백 데이터를 통해 프로젝트를 보완하였습니다.',
  <div className="flex">
    <Link
      className="underline transition-colors duration-300 hover:bg-main-color"
      href="https://www.notion.so/prgrms/query-Key-c4af6ec051c648fa930b048d34051b34"
      rel="noopener noreferrer"
      target="_blank"
      passHref
    >
      동적 query key
    </Link>
    <span>
      로 인한 버그 문제를 해결함으로써 어떻게 query key를 사용해야할지 명확하게
      알게되었습니다.
    </span>
  </div>,
];
