export const portfolioAccordionsContent = [
  {
    id: '1',
    text: 'React',
    answer:
      'UI 개발에 집중할 수 있습니다. 컴포넌트를 이용해서 재사용 가능하고, 논리적으로 파일을 나누어서 개발 진행을 할 수 있습니다. 또한 JSX 문법을 이용해서 조금 더 직관적으로 템플릿을 구성할 수 있어서 사용했습니다. 그리고 커뮤니티가 방대해서 자료 찾기도 편합니다.',
  },
  {
    id: '2',
    text: 'NextJS',
    answer:
      'SEO을 신경써서 검색엔진에 노출시키고 싶었습니다. SSR을 통해서 SEO를 향상시키고, 별도의 routing 라이브러리없이 페이지 routing을 구현할 수 있는 것도 선택의 기준이 되었습니다.',
  },
  {
    id: '3',
    text: 'TypeScript',
    answer:
      '함수나 객체에 들어가는 구조에 타입을 정의함으로써 인자나 프로퍼티의 자동완성으로 개발 진행할 때 편의성을 얻을 수 있습니다. 또한 함수, 객체의 값들을 실행 전에 타입이 틀린 부분을 발견하여 실행 후에 에러를 방지할 수 있습니다.',
  },
  {
    id: '4',
    text: 'Tailwind',
    answer:
      'NextJs와의 호환성과 효율성을 위해 Tailwind CSS를 선택했습니다. NextJs와 Tailwind는 함께 사용하기에 이상적인 조합으로, SSR과 빠른 페이지 로딩을 지원하는 NextJs의 기능과 Tailwind의 빠른 스타일링 능력이 잘 어우러집니다. 또한, Tailwind의 클래스 기반 스타일링은 NextJs의 컴포넌트 기반 구조와 잘 맞아, 재사용성과 유지 보수성을 높이는 데 도움이 되었습니다. 이 두 기술의 조합으로 프로젝트의 개발 속도와 품질을 모두 향상시킬 수 있었습니다.',
  },
];

export const portfolioContent = [
  '나만의 포트폴리오를 가지기 위해서 개발하였습니다.',
  '반응형 디자인을 적용하였습니다.',
  'SEO 최적화를 위해 시멘틱 태그를 전략적으로 배치하였습니다.',
];
